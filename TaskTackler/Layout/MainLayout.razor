@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@using TaskTackler.Services
@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main class="app-background">
        <div class="top-row px-4">
            <span class="welcome">Welcome,</span> <span class="username">@username</span>

           <AuthorizeView>
               <Authorized>
                    <a class="logout" @onclick="Logout" title="Logout from the application">Logout</a>
               </Authorized>
           </AuthorizeView>
          
           
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string username = "Guest";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsername();
    }

    private async Task LoadUsername()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            username = user.Identity.Name ?? "Guest";
        }
        else
        {
            username = "Guest";
        }

        StateHasChanged();


    }

    protected async override Task OnParametersSetAsync()
    {
        await LoadUsername(); // This will ensure username is updated whenever parameters change
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        
        var authProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

        await authProvider.MarkUserAsLoggedOut();
       

        NavigationManager?.NavigateTo("login");
    }
}
