@page "/"
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using TaskTackler.Services
@using TaskTackler.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider Auth
@inject ITaskService TaskService
@inject IAuthService AuthService
@attribute [Authorize]

<h1 class="box" id="heading">Todo List</h1>



<Toasts class="p-3 notification" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />



@if (todos.Data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="box">
        @foreach (var todo in todos.Data)
        {

            <EditForm Model="todo" OnValidSubmit="() => SaveChanges(todo)">
                <div class="item">
                    <input type="checkbox" @bind-value="todo.IsCompleted" disabled="@todo.IsCompleted" checked="@todo.IsCompleted" @onclick="() => UpdateIsCompleted(todo)" class="input-checkbox" />
                    <input @bind="todo.Task" class="input-text" />

                    <!-- Save Button -->
                    <button type="submit" class="icon-button save" title="Save">
                        <i class="fas fa-save"></i>
                    </button>

                    <!-- Delete Button -->
                    <button type="button" class="icon-button delete" @onclick="() => DeleteTask(todo)" title="Delete">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </EditForm>
        }

        <EditForm Model="newTodo" OnValidSubmit="AddTask" class="add-task-form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input @bind-value="newTodo.Task" class="input-text" placeholder="New Item" autocomplete="off" autofocus="true" />
            <button type="submit" class="add-button">+</button>
        </EditForm>

       

    </div>
    <div class="box">
        <div class="pagination-container">
            <Pagination ActivePageNumber="@currentPage"
                        TotalPages="@totalPages"
                        PageChanged="@HandlePageChanged"
                        DisplayPages="5"
                        FirstLinkIcon="IconName.ChevronDoubleLeft"
                        PreviousLinkIcon="IconName.ChevronLeft"
                        NextLinkIcon="IconName.ChevronRight"
                        LastLinkIcon="IconName.ChevronDoubleRight"
                        class="pagination-link" />
        </div>
    </div>
}






@code {
    private PaginatedResponse<List<TodoModel>> todos = new PaginatedResponse<List<TodoModel>>
    {
        Data = new List<TodoModel>(),
        TotalPages = 0,
        CurrentPage = 1,
        PageSize = 5
    };

    private TodoModel newTodo = new TodoModel();
    private string errorMessage = string.Empty;
    private int currentPage = 1;
    private int totalPages = 1;
    List<ToastMessage> messages = new List<ToastMessage>();
    // private bool isFirstRender = true;

    private void ShowMessage(ToastType toastType, string message, string title, string helpText) => messages.Add(CreateToastMessage(toastType, message, title, helpText));

    private ToastMessage CreateToastMessage(ToastType toastType, string message, string title, string helpText)
      => new ToastMessage
          {
              Type = toastType,
              Title = title,
              HelpText = helpText,
              Message = message,
          };

    private async Task HandlePageChanged(int newPageNuber)
    {
        await LoadTodos(newPageNuber);
        StateHasChanged();
    }

    private async Task LoadTodos(int pageNumber)
    {
        var response = await TaskService.GetTodosAsync(pageNumber, 5);
        if (response.Data is not null && response.Data.Count > 0)
        {
            todos = response; 
            currentPage = pageNumber;
            totalPages = response.TotalPages;
            StateHasChanged();
        }
        else
        {
            todos.Data?.Clear();
            StateHasChanged();
        }

       
    }


    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticatedAsync())
        {
            var initialLoad = await TaskService.GetTodosAsync(1, 5);
            totalPages = initialLoad.TotalPages;
            currentPage = totalPages; // Postavite na poslednju stranicu

            // Učitavanje podataka za poslednju stranicu
            await LoadTodos(currentPage);
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }


    /// <summary>
    /// Saves changes made to a TodoModel instance by calling the UpdateTodoAsync method of the TaskService.
    /// If the update is successful, it also marks the todo as completed by calling UpdateIsCompleted.
    /// Displays a toast message indicating the outcome of the operation.
    /// </summary>
    /// <param name="todo">The TodoModel instance containing the updated task information.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task SaveChanges(TodoModel todo)
    {
        var success = await TaskService.UpdateTodoAsync(todo);

        if (success)
        {
            await LoadTodos(currentPage);
            StateHasChanged(); 
            ShowMessage(ToastType.Success, "Task saved successfully.", "Todo App", $"Task {todo.Task} saved successfully.");
        }
        else
        {
            ShowMessage(ToastType.Warning, "Failed to save task.", "Todo App", "Failed to save task.");
        }
    }


    /// <summary>
    /// Marks a TodoModel instance as completed by calling the MarkTodoAsCompletedAsync method of the TaskService.
    /// Logs the outcome of the operation to the console.
    /// </summary>
    /// <param name="todo">The TodoModel instance to be marked as completed.</param>
    /// <returns>A Task representing the asynchronous operation, with no return value.</returns>
    private async Task UpdateIsCompleted(TodoModel todo)
    {
        todo.IsCompleted = true;
        bool success = await TaskService.MarkTodoAsCompletedAsync(todo);


        if (success)
        {
            ShowMessage(ToastType.Success, "Task marked as completed.", "Task Update", $"The task {todo.Task} has been successfully marked as completed.");

        }
        else
        {
            ShowMessage(ToastType.Warning, "Failed to mark task as completed.", "Task Update", $"There was a problem marking the task {todo.Task} as completed. Please try again.");
            todo.IsCompleted = false;
        }
    }

    /// <summary>
    /// Deletes a specified TodoModel instance by calling the DeleteTodoAsync method of the TaskService.
    /// If the deletion is successful, the todo item is removed from the local list and a success message is displayed.
    /// Otherwise, a failure message is displayed.
    /// </summary>
    /// <param name="todo">The TodoModel instance to be deleted.</param>
    /// <returns>A Task representing the asynchronous operation.</returns>
    private async Task DeleteTask(TodoModel todo)
    {
        bool success = await TaskService.DeleteTodoAsync(todo);
        if (success)
        {
            
            todos.Data?.Remove(todo);
            await LoadTodos(currentPage); 
            if (todos.Data?.Count == 0 && currentPage > 1)
            {
                currentPage--;
                await LoadTodos(currentPage);
            }
            StateHasChanged(); 
            ShowMessage(ToastType.Danger, "Task deleted successfully.", "Todo App", $"Task {todo.Task} has been removed.");
        }
        else
        {
            ShowMessage(ToastType.Secondary, "Failed to delete task.", "Todo App", "Please try again.");
        }
    }


    /// <summary>
    /// Adds a new task to the todo list. Validates the task input before adding.
    /// If the task input is not empty, it calls the AddTodoAsync method of the TaskService to add the task.
    /// Upon successful addition, it refreshes the todo list by retrieving the updated list from the server,
    /// resets the newTodo model for the next input, and displays a success message.
    /// If the task addition fails, it displays an error message.
    /// </summary>
    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTodo.Task))
        {
            errorMessage = "Task cannot be empty.";
            ShowMessage(ToastType.Warning, errorMessage, "Todo App", $"Task {newTodo.Task} cannot be empty.");
            return;
        }

        newTodo.IsCompleted = false; // Set isCompleted to false for new tasks

        var success = await TaskService.AddTodoAsync(newTodo);

        if (success)
        {
            var initialLoad = await TaskService.GetTodosAsync(1, 5); // Get the latest page info
            totalPages = initialLoad.TotalPages;
            currentPage = totalPages; // Navigate to the last page where the new task might be

            await LoadTodos(currentPage); // Load the last page to view the newly added task

            newTodo = new TodoModel(); // Reset the newTodo model for the next task entry
            StateHasChanged(); // Ensures UI updates immediately after the state changes
            ShowMessage(ToastType.Success, "Task added successfully.", "Todo App", $"Your task {newTodo.Task} has been added to the list.");
        }
        else
        {
            ShowMessage(ToastType.Danger, "Failed to add task.", "Todo App", "Failed to add task.");
        }
    }

}


