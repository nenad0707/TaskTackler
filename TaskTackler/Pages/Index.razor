@page "/"
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using TaskTackler.Services
@using TaskTackler.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider Auth
@inject ITaskService TaskService
@inject IAuthService AuthService
@using TaskTackler.Components
@attribute [Authorize]

<h1 class="box" id="heading">Todo List</h1>

<Toasts class="p-3 notification" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<div class="box">
    <TodoList Todos="todos.Data" ToggleCompleted="UpdateIsCompleted" Delete="DeleteTask" Save="SaveChanges" />
    <AddTodoForm NewTodo="newTodo" OnAdd="AddTask" />
</div>

<div class="box">
    <div class="pagination-container">
        <Pagination ActivePageNumber="@currentPage"
                    TotalPages="@totalPages"
                    PageChanged="@HandlePageChanged"
                    DisplayPages="5"
                    FirstLinkIcon="IconName.ChevronDoubleLeft"
                    PreviousLinkIcon="IconName.ChevronLeft"
                    NextLinkIcon="IconName.ChevronRight"
                    LastLinkIcon="IconName.ChevronDoubleRight"
                    class="pagination-link" />
    </div>
</div>

@code {
    private PaginatedResponse<List<TodoModel>> todos = new PaginatedResponse<List<TodoModel>>
        {
            Data = new List<TodoModel>(),
            TotalPages = 0,
            CurrentPage = 1,
            PageSize = 5
        };

    private TodoModel newTodo = new TodoModel();
    private string errorMessage = string.Empty;
    private int currentPage = 1;
    private int totalPages = 1;
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string message, string title, string helpText) => messages.Add(CreateToastMessage(toastType, message, title, helpText));

    private ToastMessage CreateToastMessage(ToastType toastType, string message, string title, string helpText)
      => new ToastMessage
          {
              Type = toastType,
              Title = title,
              HelpText = helpText,
              Message = message,
          };

    private async Task HandlePageChanged(int newPageNumber)
    {
        currentPage = newPageNumber;
        await LoadTodos(currentPage);
    }

    private async Task LoadTodos(int pageNumber)
    {
        var response = await TaskService.GetTodosAsync(pageNumber, todos.PageSize);
        if (response.Data is not null)
        {
            todos = response;
            currentPage = pageNumber;
            totalPages = response.TotalPages;
        }
        else
        {
            todos.Data?.Clear();
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticatedAsync())
        {
            await LoadLastPage();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadLastPage()
    {
        var initialLoad = await TaskService.GetTodosAsync(1, todos.PageSize);
        totalPages = initialLoad.TotalPages;
        currentPage = totalPages;
        await LoadTodos(currentPage);
    }

    private async Task SaveChanges(TodoModel todo)
    {
        var success = await TaskService.UpdateTodoAsync(todo);
        if (success)
        {
            await LoadTodos(currentPage);
            ShowMessage(ToastType.Success, "Task saved successfully.", "Todo App", $"Task {todo.Task} saved successfully.");
        }
        else
        {
            ShowMessage(ToastType.Warning, "Failed to save task.", "Todo App", "Failed to save task.");
        }
    }

    private async Task UpdateIsCompleted(TodoModel todo)
    {
        todo.IsCompleted = true;
        bool success = await TaskService.MarkTodoAsCompletedAsync(todo);

        if (success)
        {
            ShowMessage(ToastType.Success, "Task marked as completed.", "Task Update", $"The task {todo.Task} has been successfully marked as completed.");
        }
        else
        {
            ShowMessage(ToastType.Warning, "Failed to mark task as completed.", "Task Update", $"There was a problem marking the task {todo.Task} as completed. Please try again.");
            todo.IsCompleted = false;
        }

        await LoadTodos(currentPage);
    }

    private async Task DeleteTask(TodoModel todo)
    {
        if (todo != null)
        {
            bool success = await TaskService.DeleteTodoAsync(todo);
            if (success)
            {
                await UpdatePaginationAfterDelete();
                ShowMessage(ToastType.Danger, "Task deleted successfully.", "Todo App", $"Task {todo.Task} has been removed.");
            }
            else
            {
                ShowMessage(ToastType.Secondary, "Failed to delete task.", "Todo App", "Please try again.");
            }
        }
    }

    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTodo.Task))
        {
            errorMessage = "Task cannot be empty.";
            ShowMessage(ToastType.Warning, errorMessage, "Todo App", $"Task {newTodo.Task} cannot be empty.");
            return;
        }

        newTodo.IsCompleted = false; // Set isCompleted to false for new tasks

        var success = await TaskService.AddTodoAsync(newTodo);
        if (success)
        {
            await UpdatePaginationAfterAdd();
            newTodo = new TodoModel(); // Reset the newTodo model for the next task entry
            ShowMessage(ToastType.Success, "Task added successfully.", "Todo App", $"Your task {newTodo.Task} has been added to the list.");
        }
        else
        {
            ShowMessage(ToastType.Danger, "Failed to add task.", "Todo App", "Failed to add task.");
        }
    }

    private async Task UpdatePaginationAfterDelete()
    {
        var initialLoad = await TaskService.GetTodosAsync(currentPage, todos.PageSize);
        totalPages = initialLoad.TotalPages;

        // Ensure currentPage is within valid range
        if (currentPage > totalPages)
        {
            currentPage = totalPages;
        }

        await LoadTodos(currentPage);
    }

    private async Task UpdatePaginationAfterAdd()
    {
        var initialLoad = await TaskService.GetTodosAsync(1, todos.PageSize);
        totalPages = initialLoad.TotalPages;

        // Set current page to the last page
        currentPage = totalPages;

        await LoadTodos(currentPage);
    }
}
